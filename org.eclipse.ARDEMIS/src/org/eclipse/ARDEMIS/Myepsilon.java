package org.eclipse.ARDEMIS;

import java.io.File;
import java.net.URISyntaxException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.eclipse.emf.ecore.EPackage;
import org.eclipse.epsilon.common.util.StringProperties;
import org.eclipse.epsilon.emc.emf.EmfModel;
import org.eclipse.epsilon.eol.EolModule;
import org.eclipse.epsilon.eol.IEolModule;
import org.eclipse.epsilon.eol.dom.NameExpression;
import org.eclipse.epsilon.eol.dom.PropertyCallExpression;
import org.eclipse.epsilon.eol.exceptions.EolRuntimeException;
import org.eclipse.epsilon.eol.exceptions.models.EolModelLoadingException;
import org.eclipse.epsilon.eol.models.IModel;
import org.eclipse.epsilon.eol.models.IRelativePathResolver;
import org.eclipse.uml2.uml.UMLPackage;

public class Myepsilon {
	
	private List<IModel> InputModels = new ArrayList<IModel>();
	private List<String> similarWords = new ArrayList<String>();

    public void importUMLModel(String modelname) throws EolModelLoadingException, Exception {
    	InputModels.add(0, loadUMLmodel(modelname));
    }
    
    public void importEMFModel(String modelname) throws EolModelLoadingException, Exception {
    	InputModels.add(0, loadEMFmodel(modelname));
    }

    public String getModelName() {
    	InputModels.get(0).allContents();
    	return InputModels.get(0).getName();
    }
    
    public Collection<?> getModelContents() {
    	Collection<?> modelcontents = InputModels.get(0).allContents();
    	return modelcontents;
    }
    
    public Map<String, String> getContentsName() throws EolRuntimeException {
    	Map<String, String> mydata = new HashMap<String, String>(); 
    	
    	NameExpression y = new NameExpression();
    	y.setName("name");
    	PropertyCallExpression x = new PropertyCallExpression();
 
    	IEolModule eolModule = new EolModule();
    	eolModule.getContext().getModelRepository().addModels(InputModels.get(0));
    	for (Object myobject : getModelContents()) {
    		Object ContentsName = x.execute(myobject, y, eolModule.getContext());
    		
    		mydata.put( InputModels.get(0).getElementId(myobject) , ContentsName.toString());
    	}
    	
    	return mydata;
    }
    
    public  List<String> getEName() throws EolRuntimeException{
    	Map<String, String> mydata = getContentsName();
    	//collection to list
    	List<String> arrayList = mydata.values()
                .stream()
                .collect(
                    Collectors.toCollection(ArrayList::new)
                );
    	return arrayList;
    }
    
    public  List<String> getEId() throws EolRuntimeException{
    	Map<String, String> mydata = getContentsName();
    	List<String> arrayList = mydata.keySet()
                .stream()
                .collect(
                    Collectors.toCollection(ArrayList::new)
                );
    	return arrayList;
    }
    
    public  void similarWordCheck(String x, String y, String typeofChecking) throws EolRuntimeException{
    	List<String> contentname=getEName();
    	List<String> contentId=getEId();
    	String TypeEl;
    	
    	for (int i=0; i<contentname.size(); i++) {
    		String myName =contentname.get(i).toUpperCase();
    		for(int j = 0; j <similarWords.size();j++)
    			if(InputModels.get(0).getTypeNameOf(InputModels.get(0).getElementById(y)).equals(
    					InputModels.get(0).getTypeNameOf(InputModels.get(0).getElementById(contentId.get(i))))
    						&& !(y.equals(contentId.get(i))) ) {
    				if(myName.equals(similarWords.get(j).toUpperCase())) {
    					TypeEl = InputModels.get(0).getTypeNameOf(InputModels.get(0).getElementById(y));
    					System.out.println("....." + typeofChecking +"......\n Type: " + TypeEl + 
    							"\n Input Element(first): "+ x +
    							"\n Element in the model(second): " + myName + 
    							"\n Similar word generated by " + typeofChecking + ": " + similarWords.get(j));
    					break;
    				}
    			}
    			
    	}
    	
    }
    
    public  void setSimilarwords(String Word){
    	similarWords.add(Word);
        }
    public  void clearSimilarwords(){
    	similarWords.clear();;
        }
    
    public List<String> getName() {
    	return similarWords;
    }
 
    
      
  //START load UML model
    private IModel loadUMLmodel(String Mname) throws EolModelLoadingException, Exception {
    	EPackage.Registry.INSTANCE.put(UMLPackage.eNS_URI, UMLPackage.eINSTANCE);
    	System.err.println(UMLPackage.eNS_URI);
    	List<IModel> modelUML = new ArrayList<IModel>();
    	modelUML.add(createEmfModelByURI(Mname, Mname+".uml", UMLPackage.eNS_URI, true, true));
    	modelUML.get(0).getAliases().add("In");
    	return modelUML.get(0);
    }

    //*
    		protected static EmfModel createEmfModelByURI(String name, String model, 
    				String metamodel, boolean readOnLoad, boolean storeOnDisposal) 
    						throws EolModelLoadingException, URISyntaxException {
    			EmfModel emfModel = new EmfModel();
    			StringProperties properties = new StringProperties();
    			properties.put(EmfModel.PROPERTY_NAME, name);
    			properties.put(EmfModel.PROPERTY_METAMODEL_URI, metamodel);
    			properties.put(EmfModel.PROPERTY_MODEL_URI, 
    					getFileURI(model));
    			properties.put(EmfModel.PROPERTY_READONLOAD, readOnLoad + "");
    			properties.put(EmfModel.PROPERTY_STOREONDISPOSAL, 
    					storeOnDisposal + "");
    			emfModel.load(properties, (IRelativePathResolver) null);
    			
    			return emfModel;
    		}
    		protected static java.net.URI getFileURI(String fileName) throws URISyntaxException {
    			String ModelFile="ModelRep/"+fileName;

    			//String ModelFile="C:\\Users\\Admin\\eclipse\\eclipse photon\\workspace\\org.eclipse.ReMoPreM\\ModelRep\\"+fileName;
    			return new File(ModelFile).toURI();
    			}
    		//*/ //END load UML model
    		
    		//START load EMF model
    		 private IModel loadEMFmodel(String Mname) throws EolModelLoadingException, URISyntaxException {
    			EmfModel myEMFModel = new EmfModel();
    			myEMFModel.setName(Mname);
    			///myEMFModel.getAliases().add("In");
    			myEMFModel.setMetamodelFile("ModelRep/simpleOO.ecore");
    			myEMFModel.setModelFile("ModelRep/"+Mname+".model");
    			myEMFModel.load();
    			return myEMFModel;
    		 }
    		//END load EMF model
    		  

}
